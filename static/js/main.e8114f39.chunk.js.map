{"version":3,"sources":["data/cards/absolute_zero.png","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","PageTitle","text","href","className","Title","SubTitle","PlayerAmountButton","val","handler","onClick","CardContainer","id","amount","cardList","nums","listOfRandInts","length","map","n","Card","key","name","img","CardImg","src","alt","min","max","result","tmp","randInt","includes","push","Math","round","random","App","useState","playerAmount","setPlayerAmount","heroes","HeroFile","cards","villains","VillainFile","envs","EnvFile","handlePlayerAmount","e","newAmount","currentTarget","innerHTML","parseInt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e8114f39.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/absolute_zero.5f48105d.png\";","import React from 'react';\nimport { useState } from 'react';\nimport './App.scss';\nimport HeroFile     from './data/heroes.json';\nimport VillainFile  from './data/heroes.json';\nimport EnvFile      from './data/heroes.json';\nimport CardImg      from './data/cards/absolute_zero.png';\n\nfunction App() {\n  const [playerAmount, setPlayerAmount] = useState(4)\n  const villainAmount = 1\n  const envAmount = 1\n  const heroes = HeroFile.cards\n  const villains = VillainFile.cards\n  const envs = EnvFile.cards\n\n  function handlePlayerAmount(e: React.MouseEvent<HTMLButtonElement>) { \n    const newAmount = e.currentTarget.innerHTML\n    setPlayerAmount(parseInt(newAmount))\n  }\n  return (\n    <div id=\"app\">\n      <PageTitle text=\"Sentinels Session Creator\" />\n      <div id=\"content\">\n        <div id=\"cards\">\n          <Title text=\"Cards\" />\n          <SubTitle text=\"Heroes\" />\n          <CardContainer id=\"heroCardContainer\"    amount={playerAmount}   cardList={heroes}/>\n          <Title text=\"Cards\" />\n          <SubTitle text=\"Villain\" />\n          <CardContainer id=\"villainCardContainer\" amount={villainAmount}  cardList={villains}/>\n          <Title text=\"Cards\" />\n          <SubTitle text=\"Environment\" />\n          <CardContainer id=\"envCardContainer\"     amount={envAmount}      cardList={envs}/>\n        </div>\n        <div id=\"settings\">\n          <Title    text=\"Settings\" />\n          <SubTitle text=\"Player amount\" />\n          <div id=\"amount\">\n            <PlayerAmountButton val=\"2\" handler={handlePlayerAmount} />\n            <PlayerAmountButton val=\"3\" handler={handlePlayerAmount} />\n            <PlayerAmountButton val=\"4\" handler={handlePlayerAmount} />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n// Components\ntype PageTitle = {\n  text: string;\n}\n\nfunction PageTitle({text}: PageTitle) {\n  return (\n    <a href=\"/\">\n      <div className=\"pageTitle\">\n        {text}\n      </div>\n    </a>\n  )\n}\n\ntype Title = {\n  text: string;\n}\n\nfunction Title({text}: Title) {\n  return (\n    <div className=\"title\">\n      {text}\n    </div>\n  )\n}\n\ntype SubTitle = {\n  text: string;\n}\n\nfunction SubTitle({text}: SubTitle) {\n  return (\n    <div className=\"subtitle\">\n      {text}\n    </div>\n  )\n}\n\ntype PlayerAmountButton = {\n  val: string,\n  handler(e: React.MouseEvent<HTMLButtonElement>): void;\n}\n\nfunction PlayerAmountButton({val, handler}: PlayerAmountButton) {\n  return (\n  <button className=\"button\" onClick={handler}>\n    {val}\n  </button>\n  )\n}\n\ntype CardContainer = {\n  amount: number,\n  id: string,\n  cardList: Card[]\n}\n\nfunction CardContainer({id, amount, cardList}: CardContainer) {\n  const nums = listOfRandInts(amount, 0, cardList.length - 1)\n  return (\n  <div className=\"cardContainer\">\n    <div id={id} className=\"cardContainerGrid\">\n      { nums.map((n: number) => <Card key={n} name={cardList[n].name} img={CardImg} />) }\n    </div>\n  </div>\n  )\n}\n\ntype Card = {\n  name: string,\n  img: string\n}\n\nfunction Card({name, img}: Card) {\n  return (\n    <div className=\"card\">\n      <img src={img} alt=\"cardImage\" />\n      <div className=\"cardName\">{name}</div>\n    </div>\n  )\n}\n\n// Helper functions\nconst listOfRandInts = (length: number, min: number, max: number) => {\n  var result: number[] = []\n  while (result.length < length) {\n    const tmp = randInt(min, max)\n    if (!result.includes(tmp))\n      result.push(tmp)\n  }\n  return result\n}\n\nconst randInt = (min: number, max: number) => {\n  return Math.round(Math.random() * (max - min) + min)\n}\n\n// Create array of length n\n// const arr = (n: number) => {\n//   return Array(parseInt(n + '')).fill(0)\n// }\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}